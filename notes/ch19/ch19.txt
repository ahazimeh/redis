Redis Stack contains several modules by default
    RedisSearch, RedisJSON, RedisGraph, RedisTimeSeries, RedisBloom
depending on how you deploy/run your application you might not be able to use modules

option 1: managed copy of redis
aws or google cloud to handle everything // can't use modules
option 2: to run a virtual machine or container, run redis inside so we can use modules
downside, it requires setup by ourselves (backups, security updates...)
option: 3, rely on company redis

to use redi search
    create an index, find all keys that starts with items:#
    record some info about the fields: name, color, and price
create index: FT.CREATE
run a query: FT.SEARCH

HSET cars#a1 name 'fast car' color red year 1950
HSET cars#b1 name 'car' color red year 1960
HSET cars#c1 name 'old car' color blue year 1970
HSET cars#d1 name 'new car' color blue year 1990

FT.CREATE idx:cars on HASH PREFIX 1 cars#
    SCHEMA name TEXT year NUMERIC color TAG

FT.SEARCH idx:cars '@name:(fast car)'
FT.SEARCH idx:cars '@color:{blue}'
FT.SEARCH idx:cars '@year:[1955 1960]'

Querying vs Searching
    Querying: gives the exact result you ask for:
    Searching: gives results that best answer your question:

FT.CREATE
    indexes ususally follow the naming convention idx:<thing>
    ON HASH / ON JSON
    PREFIX 1 cars# // 1 means we can have multiple different prefixes
    SCHEMA: describe the fields that should be indexed for each hash (don't have to list the schema of every field - only the onces we want to search)

type of fields:
    NUMERIC // we can do numeric query
    GEO // geographic coordinates for geo queries
    VECTOR // find similarity queries
    TAG // Used for exact string lookups (for querying)
    TEXT // Supports fuzzy search, typos, etc (for searching)
    
Numeric Queries

@name:(fast) // do a text search on 'name'
@color:{red} // do a tag search on 'color'
@year:[1955 1960] // do a numeric search on 'year'

'@year:[1955 1960]' // inclusive
'@year:[(1955 (1960]' // exclusive
'@year:[1955 +inf]' // greater than or equal to 1955
'@year:[-inf 1955]'
'-@year:[1955 1980]' // not including 1955 - 1980

Tag Queries
'@color{blue}'
'-@color{blue}'
'@color{red | blue}' // or
'@color{red\ blue}' // Escape space (red blue)

note: All 'stop' words are removed from tag and text queries!!
a, is, the, an, and, are, as, at, be, but, by, for,
if, in, into, it, no, not, of, on, or, such, that, their,
then, there, these, they, this, to, was, will, with
spaces and punctuation are also removed

https://snowballstem.org/demo.html // stimming fastly -> fast

FT.SEARCH idx:cars 'fast' // query over all fields marked as text
FT.SEARCH idx:cars '@name:(fast car)' // fast and car
FT.SEARCH idx:cars '@name:(fast | car)' // fast or car
FT.SEARCH idx:cars '-@name:(fast car)' // negation

Fuzzy search // Levenshtein distance
FT.SEARCH idx:cars '-@name:(%car%)' // % is not wild card

FT.SEARCH idx:cars '@name:(%dar%)' // 1 mismatch allowed
FT.SEARCH idx:cars '@name:(%%%dar%%%)' // 3 mismatch allowed // maximum we can have
fa* // minimum 2 characters // can't do f*

pre-processing search criteria
    prefix search (autocomplete option)
        ex: fast ca -> fast* | ca*
    fuzzy search (results)
        ex: fast dar -> %fast% | %dar%